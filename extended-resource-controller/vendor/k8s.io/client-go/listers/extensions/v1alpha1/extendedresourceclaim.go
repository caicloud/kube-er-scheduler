/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/extensions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExtendedResourceClaimLister helps list ExtendedResourceClaims.
type ExtendedResourceClaimLister interface {
	// List lists all ExtendedResourceClaims in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExtendedResourceClaim, err error)
	// ExtendedResourceClaims returns an object that can list and get ExtendedResourceClaims.
	ExtendedResourceClaims(namespace string) ExtendedResourceClaimNamespaceLister
	ExtendedResourceClaimListerExpansion
}

// extendedResourceClaimLister implements the ExtendedResourceClaimLister interface.
type extendedResourceClaimLister struct {
	indexer cache.Indexer
}

// NewExtendedResourceClaimLister returns a new ExtendedResourceClaimLister.
func NewExtendedResourceClaimLister(indexer cache.Indexer) ExtendedResourceClaimLister {
	return &extendedResourceClaimLister{indexer: indexer}
}

// List lists all ExtendedResourceClaims in the indexer.
func (s *extendedResourceClaimLister) List(selector labels.Selector) (ret []*v1alpha1.ExtendedResourceClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExtendedResourceClaim))
	})
	return ret, err
}

// ExtendedResourceClaims returns an object that can list and get ExtendedResourceClaims.
func (s *extendedResourceClaimLister) ExtendedResourceClaims(namespace string) ExtendedResourceClaimNamespaceLister {
	return extendedResourceClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExtendedResourceClaimNamespaceLister helps list and get ExtendedResourceClaims.
type ExtendedResourceClaimNamespaceLister interface {
	// List lists all ExtendedResourceClaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ExtendedResourceClaim, err error)
	// Get retrieves the ExtendedResourceClaim from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ExtendedResourceClaim, error)
	ExtendedResourceClaimNamespaceListerExpansion
}

// extendedResourceClaimNamespaceLister implements the ExtendedResourceClaimNamespaceLister
// interface.
type extendedResourceClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExtendedResourceClaims in the indexer for a given namespace.
func (s extendedResourceClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExtendedResourceClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExtendedResourceClaim))
	})
	return ret, err
}

// Get retrieves the ExtendedResourceClaim from the indexer for a given namespace and name.
func (s extendedResourceClaimNamespaceLister) Get(name string) (*v1alpha1.ExtendedResourceClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("extendedresourceclaim"), name)
	}
	return obj.(*v1alpha1.ExtendedResourceClaim), nil
}
