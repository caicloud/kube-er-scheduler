/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.extensions.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ExtendedResource represents a specific extended resource
message ExtendedResource {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the ExtendedResource.
  optional ExtendedResourceSpec spec = 2;

  // Status is the current state of the ExtendedResource.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional ExtendedResourceStatus status = 3;
}

// ExtendedResourceClaim is used by users to ask for extended resources
message ExtendedResourceClaim {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec is the desired state of the ExtendedResourceClaim.
  optional ExtendedResourceClaimSpec spec = 2;

  // Status is the current state of the ExtendedResourceClaim.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional ExtendedResourceClaimStatus status = 3;
}

// ExtendedResourceClaimList is a collection of ExtendedResourceClaim.
message ExtendedResourceClaimList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ExtendedResourceClaim.
  repeated ExtendedResourceClaim items = 2;
}

// ExtendedResourceClaimSpec describes the ExtendedResourceClaim the user wishes to exist.
message ExtendedResourceClaimSpec {
  // defines general resource property matching constraints.
  // e.g.: zone in { us-west1-b, us-west1-c }; type: k80
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector metadataRequirements = 1;

  // ExtendedResourceNames are the names of ExtendedResources
  // +optional
  repeated string extendedResourceNames = 2;

  // raw extended resource name, such as nvidia.com/gpu
  // used for batch resources request
  optional string rawResourceName = 3;

  // number of extended resource, for example: request 8 nvidia.com/gpu at one time
  // +optional
  optional int64 extendResourceNum = 4;
}

// ExtendedResourceClaimStatus is the status of ExtendedResourceClaim
message ExtendedResourceClaimStatus {
  // Phase indicates if the Extended Resource Claim is Lost, bound or pending
  // +optional
  optional string phase = 1;

  // A human-readable message indicating details about why CRC is in this phase
  // +optional
  optional string message = 2;

  // Brief string that describes any failure, used for CLI etc
  // +optional
  optional string reason = 3;
}

// ExtendedResourceList is a collection of ExtendedResource.
message ExtendedResourceList {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ExtendedResource.
  repeated ExtendedResource items = 2;
}

// ExtendedResourceSpec describes the ExtendedResource the user wishes to exist.
message ExtendedResourceSpec {
  // NodeAffinity defines constraints that limit what nodes this resource can be accessed from.
  // This field influences the scheduling of pods that use this resource.
  // +optional
  optional ResourceNodeAffinity nodeAffinity = 1;

  // Raw resource name. E.g.: nvidia.com/gpu
  optional string rawResourceName = 2;

  // device id
  optional string deviceID = 3;

  // gpuType: k80
  // zone: us-west1-b
  // Note Kubelet adds a special property corresponding to the above ResourceName field.
  // This will allow a single ResourceClass (e.g., “gpu”) to match multiple types of
  // resources (e.g., nvidia.com/gpu and amd.com/gpu) through general set selector.
  // +optional
  map<string, string> properties = 4;

  // ExtendedResourceClaimName is the name of ExtendedResourceClaim that the ExtendedResource is bound to
  // +optional
  optional string extendedResourceClaimName = 5;
}

// ExtendedResourceStatus is the status of ExtendedResource
message ExtendedResourceStatus {
  // Capacity is the capacity of this device
  // +optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity capacity = 1;

  // Allocatable is the resource of this device that can be available for scheduling
  // +optional
  optional k8s.io.apimachinery.pkg.api.resource.Quantity allocatable = 2;

  // Phase indicates if the extended Resource is available, bound or pending
  // +optional
  optional string phase = 3;

  // A human-readable message indicating details about why CR is in this phase
  // +optional
  optional string message = 4;

  // Brief string that describes any failure, used for CLI etc
  // +optional
  optional string reason = 5;
}

// ResourceNodeAffinity defines constraints that limit what nodes this extended resource can be accessed from.
message ResourceNodeAffinity {
  // Required specifies hard node constraints that must be met.
  optional k8s.io.api.core.v1.NodeSelector required = 1;
}

